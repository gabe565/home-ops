# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-3.7.3/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: shlink
  namespace: shlink
spec:
  chart:
    spec:
      chart: app-template
      version: 3.7.3
      reconcileStrategy: ChartVersion
      sourceRef:
        kind: HelmRepository
        namespace: flux-system
        name: bjw-s
  interval: 1h
  driftDetection:
    mode: enabled
  values:
    controllers:
      shlink:
        enabled: false
      api:
        strategy: RollingUpdate
        initContainers:
          geoip:
            image: &image
              repository: ghcr.io/shlinkio/shlink
              tag: 4.4.6-roadrunner@sha256:f757d0f668acd9b670ff8b7d07be82e0e1f5446911d5938c4d0de615fc87a03d
              pullPolicy: IfNotPresent
            command:
              - sh
              - -c
              - |
                set -eux
                cp -a ./vendor/shlinkio/shlink-ip-geolocation/src/GeoLite2/* /geoip
                sed -i 's|https://download.maxmind.com|http://geoip-download.geoip|' \
                  /geoip/GeoLite2Options.php
        containers:
          app:
            image: *image

            env:
              TZ: America/Chicago
              DEFAULT_DOMAIN: ${app_url}
              SHORT_DOMAIN_HOST: ${app_url}
              SHORT_DOMAIN_SCHEMA: https
              VALIDATE_URLS: "true"
              ANONYMIZE_REMOTE_ADDR: "false"
              ENABLE_PERIODIC_VISIT_LOCATE: "true"
              # AUTO_RESOLVE_TITLES: "true"
              GEOLITE_LICENSE_KEY: stub

              DB_DRIVER: postgres
              DB_HOST: postgresql-rw
              DB_NAME: shlink
              DB_USER: shlink
              DB_PASSWORD:
                secretKeyRef:
                  name: postgresql-app
                  key: password

              WEB_WORKER_NUM: "4"
              TASK_WORKER_NUM: "4"

              SKIP_INITIAL_GEOLITE_DOWNLOAD: "true"
            securityContext:
              readOnlyRootFilesystem: true
        pod:
          labels:
            policy.gabe565.com/egress-geoip: "true"
            policy.gabe565.com/egress-namespace: "true"
            policy.gabe565.com/egress-world: "true"
            policy.gabe565.com/ingress-ingress: "true"
          terminationGracePeriodSeconds: 1
      frontend:
        strategy: RollingUpdate
        containers:
          app:
            image:
              repository: ghcr.io/shlinkio/shlink-web-client
              tag: 4.3.0@sha256:4a84d58508d0a327e6c383a0b57f624dd9a4f1a6e24f3cb538dec18dbaa9f7a1
              pullPolicy: IfNotPresent
            securityContext:
              readOnlyRootFilesystem: true
        pod:
          labels:
            policy.gabe565.com/ingress-ingress: "true"

    service:
      shlink:
        controller: shlink
        enabled: false
      api:
        controller: api
        ports:
          http:
            port: 8080
      frontend:
        controller: frontend
        ports:
          http:
            port: 8080

    persistence:
      data:
        enabled: true
        type: emptyDir
        advancedMounts:
          api:
            app:
              - path: /etc/shlink/data
      tmp:
        enabled: true
        type: emptyDir
      geolite2:
        enabled: true
        type: emptyDir
        advancedMounts:
          api:
            geoip:
              - path: /geoip
            app:
              - path: /etc/shlink/vendor/shlinkio/shlink-ip-geolocation/src/GeoLite2
                readOnly: true

    ingress:
      shlink:
        enabled: true
        hosts:
          - host: ${app_url}
            paths:
              - path: /
                service:
                  identifier: api
                  port: http
        tls:
          - secretName: ${certificate_name}
            hosts:
              - ${app_url}
      frontend:
        enabled: true
        hosts:
          - host: ${admin_url}
            paths:
              - path: /
                service:
                  identifier: frontend
                  port: http
        tls: &admin-tls
          - secretName: ${certificate_name}
            hosts:
              - ${admin_url}
      frontend-root:
        enabled: true
        annotations:
          nginx.ingress.kubernetes.io/auth-url:
            http://ak-outpost-gabernetes.authentik.svc.cluster.local:9000/outpost.goauthentik.io/auth/nginx
          nginx.ingress.kubernetes.io/auth-signin: https://$host/outpost.goauthentik.io/start?rd=$scheme://$http_host$escaped_request_uri
          nginx.ingress.kubernetes.io/auth-response-headers: Set-Cookie
          nginx.ingress.kubernetes.io/auth-snippet: proxy_set_header X-Forwarded-Host $http_host;
        hosts:
          - host: ${admin_url}
            paths:
              - path: /
                pathType: Exact
                service:
                  identifier: frontend
                  port: http
        tls: *admin-tls
      frontend-servers-json:
        enabled: true
        annotations:
          nginx.ingress.kubernetes.io/auth-url:
            http://ak-outpost-gabernetes.authentik.svc.cluster.local:9000/outpost.goauthentik.io/auth/nginx
          nginx.ingress.kubernetes.io/auth-signin: https://$host/outpost.goauthentik.io/start?rd=$scheme://$http_host$escaped_request_uri
          nginx.ingress.kubernetes.io/auth-response-headers: Set-Cookie,X-Shlink-Api-Key
          nginx.ingress.kubernetes.io/auth-snippet: proxy_set_header X-Forwarded-Host $http_host;
          nginx.ingress.kubernetes.io/configuration-snippet: |
            access_by_lua_block {
              local apiKey = ngx.var.authHeader1
              if apiKey == nil then
                return ngx.exit(404)
              else
                local cjson = require "cjson"
                ngx.say(cjson.encode({
                  {name="${app_url}", url="https://${app_url}", apiKey=apiKey}
                }))
                return ngx.exit(200)
              end
            }
        hosts:
          - host: ${admin_url}
            paths:
              - path: /servers.json
                pathType: Exact
                service:
                  identifier: frontend
                  port: http
        tls: *admin-tls
      remove-sw:
        enabled: true
        annotations:
          nginx.ingress.kubernetes.io/configuration-snippet: |
            add_header Content-Type application/javascript;
            return 200 "self.addEventListener('install', event => { event.waitUntil(self.skipWaiting()) })";
        hosts:
          - host: ${admin_url}
            paths:
              - path: /service-worker.js
                pathType: Exact
                service:
                  identifier: frontend
                  port: http
        tls: *admin-tls
