# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-4.2.0/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: change-detection
  namespace: change-detection
spec:
  chart:
    spec:
      chart: app-template
      version: 4.2.0
      reconcileStrategy: ChartVersion
      sourceRef:
        kind: HelmRepository
        namespace: flux-system
        name: bjw-s
  interval: 1h
  driftDetection:
    mode: enabled
  values:
    controllers:
      main:
        annotations:
          secret.reloader.stakater.com/reload: browserless
        containers:
          app:
            image:
              repository: ghcr.io/dgtlmoon/changedetection.io
              tag: 0.50.10@sha256:ad3e41e6666d8359016ec9a422ebfe86a4368e0dcae52a6b7255bf0c862970ad
              pullPolicy: IfNotPresent
            env:
              TZ: America/Chicago
              BASE_URL: https://${app_url}
              BROWSER_TOKEN:
                secretKeyRef:
                  name: browserless
                  key: token
              PLAYWRIGHT_DRIVER_URL:
                value: >-
                  {{- $launch := dict "headless" "false" "stealth" "true" "args" (list "--window-size=1920,1080" "--force-color-profile=srgb") -}}
                  ws://browserless.browserless/chromium?token=$(BROWSER_TOKEN)&blockAds=true&launch={{ toJson $launch }}
                dependsOn: BROWSER_TOKEN
            probes:
              startup:
                enabled: true
                spec:
                  failureThreshold: 30
                  periodSeconds: 5
              liveness:
                enabled: true
              readiness:
                enabled: true
            securityContext:
              runAsUser: 65534
              runAsGroup: 65534
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities: { drop: [ALL] }
        pod:
          labels:
            policy.gabe565.com/egress-browserless: "true"
            policy.gabe565.com/egress-namespace: "true"
            policy.gabe565.com/egress-world: "true"
            policy.gabe565.com/ingress-nginx: "true"
          securityContext:
            runAsNonRoot: true
            seccompProfile: { type: RuntimeDefault }
          terminationGracePeriodSeconds: 1

    service:
      main:
        controller: main
        ports:
          http:
            port: 5000

    persistence:
      data:
        suffix: data
        storageClass: longhorn-ssd
        accessMode: ReadWriteOnce
        size: 1Gi
        retain: true
        globalMounts:
          - path: /datastore
      tmp:
        type: emptyDir

    ingress:
      main:
        annotations:
          nginx.ingress.kubernetes.io/auth-url: |-
            http://ak-outpost-gabernetes.authentik.svc.cluster.local:9000/outpost.goauthentik.io/auth/nginx
          nginx.ingress.kubernetes.io/auth-signin: |-
            https://$host/outpost.goauthentik.io/start?rd=$scheme://$http_host$escaped_request_uri
          nginx.ingress.kubernetes.io/auth-response-headers: |-
            Set-Cookie,X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid
          nginx.ingress.kubernetes.io/auth-snippet: |
            proxy_set_header X-Forwarded-Host $http_host;
        hosts:
          - host: ${app_url}
            paths:
              - path: /
                service:
                  identifier: main
                  port: http
        tls:
          - secretName: ${certificate_name}
            hosts:
              - ${app_url}
