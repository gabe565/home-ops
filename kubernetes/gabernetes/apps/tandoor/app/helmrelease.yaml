# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-3.7.3/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: tandoor
  namespace: tandoor
spec:
  chart:
    spec:
      chart: app-template
      version: 3.7.3
      reconcileStrategy: ChartVersion
      sourceRef:
        kind: HelmRepository
        namespace: flux-system
        name: bjw-s
  interval: 1h
  driftDetection:
    mode: enabled
  values:
    controllers:
      tandoor:
        annotations:
          secret.reloader.stakater.com/reload: internal-tls
        strategy: RollingUpdate
        initContainers:
          collectstatic: &container
            image:
              repository: ghcr.io/tandoorrecipes/recipes
              tag: 2.3.2@sha256:650983bb4fb9f6941ad53c83b4cc94e4236d803c187034429c2eafe5e5ac098e
            command: [python, manage.py, collectstatic, --noinput]
            env:
              TZ: America/Chicago
              PATH: /opt/recipes/venv/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
              VIRTUAL_ENV: /opt/recipes/venv

              SECRET_KEY: ${secret_key}
              FRACTION_PREF_DEFAULT: "1"
              DEBUG: "0"

              DB_ENGINE: django.db.backends.postgresql
              POSTGRES_HOST: postgresql-rw
              POSTGRES_DB: tandoor
              POSTGRES_USER: tandoor
              POSTGRES_PASSWORD:
                secretKeyRef:
                  name: postgresql-app
                  key: password

              S3_ENDPOINT_URL: ${s3_url}
              S3_ACCESS_KEY: ${s3_access_key}
              S3_SECRET_ACCESS_KEY: ${s3_secret_key}
              S3_BUCKET_NAME: tandoor
              S3_REGION_NAME: us-central-1

              OAUTH_ID: authentik
              OAUTH_NAME: Authentik
              OAUTH_SERVER_URL: https://${oauth_host}/application/o/tandoor-recipes/.well-known/openid-configuration
              OAUTH_CLIENT_ID: ${oauth_client_id}
              OAUTH_CLIENT_SECRET: ${oauth_client_secret}
              SOCIAL_PROVIDERS: allauth.socialaccount.providers.openid_connect
              # language=json
              SOCIALACCOUNT_PROVIDERS:
                value: |-
                  {"openid_connect":{"SERVERS":[{"id": "$(OAUTH_ID)","name": "$(OAUTH_NAME)","server_url": "$(OAUTH_SERVER_URL)","token_auth_method": "client_secret_basic","APP": {"client_id": "$(OAUTH_CLIENT_ID)","secret": "$(OAUTH_CLIENT_SECRET)"}}]}}
                dependsOn: OAUTH_ID
            securityContext:
              allowPrivilegeEscalation: false
              capabilities: {drop: [ALL]}
              readOnlyRootFilesystem: true
          migrate:
            <<: *container
            command: [python, manage.py, migrate]
        containers:
          app:
            <<: *container
            command:
              - gunicorn
              - --bind=0.0.0.0:8080
              - --workers=1
              - --threads=2
              - --timeout=30
              - --error-logfile=-
              - --certfile=/tls/tls.crt
              - --keyfile=/tls/tls.key
              - recipes.wsgi
            probes:
              startup:
                enabled: true
                spec:
                  failureThreshold: 30
                  periodSeconds: 5
              liveness:
                enabled: true
              readiness:
                enabled: true

        pod:
          enableServiceLinks: false
          labels:
            policy.gabe565.com/egress-namespace: "true"
            policy.gabe565.com/egress-world: "true"
            policy.gabe565.com/ingress-nginx: "true"
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            fsGroup: 65534
            fsGroupChangePolicy: OnRootMismatch
            seccompProfile: {type: RuntimeDefault}

    service:
      tandoor:
        controller: tandoor
        ports:
          http:
            port: 8080

    persistence:
      static:
        enabled: true
        type: emptyDir
        advancedMounts:
          tandoor:
            collectstatic:
              - path: /opt/recipes/staticfiles
            app:
              - path: /opt/recipes/staticfiles
                readOnly: true
      tls:
        type: secret
        name: internal-tls
      tmp:
        type: emptyDir

    ingress:
      tandoor:
        enabled: true
        annotations:
          nginx.ingress.kubernetes.io/backend-protocol: HTTPS
        hosts:
          - host: ${app_url}
            paths:
              - path: /
                service: &svc
                  identifier: tandoor
                  port: http
        tls: &tls
          - secretName: ${certificate_name}
            hosts:
              - ${app_url}
      redirect-login:
        enabled: true
        annotations:
          nginx.ingress.kubernetes.io/temporal-redirect: https://${app_url}/accounts/oidc/authentik/login/?process=login&next=/
        hosts:
          - host: ${app_url}
            paths:
              - path: /accounts/login
                pathType: ImplementationSpecific
                service: *svc
        tls: *tls
