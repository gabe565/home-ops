# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-3.6.0/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: miniflux
  namespace: miniflux
spec:
  chart:
    spec:
      chart: app-template
      version: 3.5.1
      reconcileStrategy: ChartVersion
      sourceRef:
        kind: HelmRepository
        namespace: flux-system
        name: bjw-s
  interval: 1h
  driftDetection:
    mode: enabled
  values:
    controllers:
      miniflux:
        strategy: RollingUpdate
        containers:
          app:
            image:
              repository: ghcr.io/miniflux/miniflux
              tag: 2.2.4@sha256:20adbf84f0d8cd24b4ebbc138e31087419a274fd9c717c6a909b0773b4538b98
              pullPolicy: IfNotPresent
            env:
              TZ: America/Chicago

              DATABASE_URL:
                secretKeyRef:
                  name: postgresql-app
                  key: uri
              RUN_MIGRATIONS: "1"

              POLLING_SCHEDULER: entry_frequency

              CREATE_ADMIN: "0"
              OAUTH2_PROVIDER: oidc
              OAUTH2_CLIENT_ID: ${oauth2_client_id}
              OAUTH2_CLIENT_SECRET: ${oauth2_client_secret}
              OAUTH2_REDIRECT_URL: https://${app_url}/oauth2/oidc/callback
              OAUTH2_OIDC_DISCOVERY_ENDPOINT: https://${auth_host}/application/o/miniflux/
              OAUTH2_USER_CREATION: "1"
              DISABLE_LOCAL_AUTH: "true"

              METRICS_COLLECTOR: "1"
              METRICS_ALLOWED_NETWORKS: 0.0.0.0/0

              FETCH_YOUTUBE_WATCH_TIME: "1"
            probes:
              startup:
                enabled: true
                spec:
                  failureThreshold: 30
                  periodSeconds: 5
              liveness:
                enabled: true
              readiness:
                enabled: true
            securityContext:
              readOnlyRootFilesystem: true
        pod:
          labels:
            policy.gabe565.com/egress-ingress: "true"
            policy.gabe565.com/egress-namespace: "true"
            policy.gabe565.com/egress-world: "true"
            policy.gabe565.com/ingress-ingress: "true"
            policy.gabe565.com/ingress-prometheus: "true"

    service:
      miniflux:
        controller: miniflux
        ports:
          http:
            port: 8080

    ingress:
      miniflux:
        enabled: true
        hosts:
          - host: ${app_url}
            paths:
              - path: /
                service:
                  identifier: miniflux
                  port: http
        tls: &tls
          - secretName: ${certificate_name}
            hosts:
              - ${app_url}
      metrics:
        enabled: true
        annotations:
          nginx.ingress.kubernetes.io/configuration-snippet: |
            return 404;
        hosts:
          - host: ${app_url}
            paths:
              - path: /metrics
                pathType: Exact
                service:
                  identifier: miniflux
                  port: http
        tls: *tls
      redirect:
        enabled: true
        annotations:
          nginx.ingress.kubernetes.io/configuration-snippet: |
            access_by_lua_block {
              if ngx.var.cookie_MinifluxUserSessionID == nil then
                return ngx.redirect("/oauth2/oidc/redirect")
              end
            }
        hosts:
          - host: ${app_url}
            paths:
              - path: /
                pathType: Exact
                service:
                  identifier: miniflux
                  port: http
        tls: *tls

    serviceMonitor:
      main:
        enabled: true
        serviceName: miniflux
        endpoints:
         - port: http
           scheme: http
           path: /metrics
           interval: 1m
           scrapeTimeout: 10s
