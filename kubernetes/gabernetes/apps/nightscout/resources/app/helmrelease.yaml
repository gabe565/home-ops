apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: nightscout
  namespace: nightscout
spec:
  chart:
    spec:
      chart: app-template
      version: 4.4.0
      reconcileStrategy: ChartVersion
      sourceRef:
        kind: HelmRepository
        namespace: flux-system
        name: bjw-s
  interval: 1h
  driftDetection:
    mode: enabled
  values:
    controllers:
      nightscout:
        annotations:
          secret.reloader.stakater.com/reload: internal-tls
        containers:
          app:
            image:
              repository: ghcr.io/gabe565/nightscout
              tag: 15.0.3-websocket@sha256:1410f1c64df0b3367ed6b3e8252dfad08859ffa6e91585450a129067a8419b6d
              pullPolicy: IfNotPresent
            env:
              HOSTNAME: "::"
              PORT: "1337"
              SSL_CERT: /tls/tls.crt
              SSL_KEY: /tls/tls.key
              SSL_CA: /tls/ca.crt

              TZ: America/Chicago
              TIME_FORMAT: "24"
              API_SECRET: ${api_secret}
              AUTH_DEFAULT_ROLES: denied

              DB_PASSWORD:
                secretKeyRef:
                  name: mongodb
                  key: mongodb-passwords
              MONGODB_URI:
                value: mongodb://nightscout:$(DB_PASSWORD)@mongodb/nightscout
                dependsOn: DB_PASSWORD
              MONGODB_COLLECTION: entries

              ENABLE: careportal simplealarms
              DISABLE: ar2 simplealarms upbat dbsize

              DISPLAY_UNITS: mg/dl
              ALARM_TIMEAGO_URGENT: off
              ALARM_TIMEAGO_WARN: off
              ALARM_TYPES: " "
              DAY_START: "9.0"
              DAY_END: "23.0"
              DEVICESTATUS_ADVANCED: "true"
              EDIT_MODE: on
              SCALE_Y: linear
              SHOW_FORECAST: " "
              SHOW_RAWBG: noise
              THEME: colors
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: {drop: [ALL]}
            probes:
              liveness: &probe
                enabled: true
                custom: true
                spec:
                  httpGet:
                    port: 1337
                    scheme: HTTPS
                    path: /api/v2/status.txt
                    httpHeaders:
                      - name: Api-Secret
                        value: '{{ sha1sum "${probe_token}" }}'
              readiness: *probe
              startup:
                enabled: true
                spec:
                  failureThreshold: 60
                  periodSeconds: 5
        pod:
          labels:
            policy.gabe565.com/egress-namespace: "true"
            policy.gabe565.com/egress-world: "true"
            policy.gabe565.com/ingress-home-assistant: "true"
            policy.gabe565.com/ingress-namespace: "true"
            policy.gabe565.com/ingress-nginx: "true"
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000
            fsGroupChangePolicy: OnRootMismatch
            seccompProfile: {type: RuntimeDefault}

    persistence:
      tls:
        type: secret
        name: internal-tls

    service:
      nightscout:
        controller: nightscout
        ports:
          http:
            port: 1337

    ingress:
      nightscout:
        annotations:
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          nginx.ingress.kubernetes.io/auth-url: |-
            http://ak-outpost-gabernetes.authentik.svc.cluster.local:9000/outpost.goauthentik.io/auth/nginx
          nginx.ingress.kubernetes.io/auth-signin: https://$host/outpost.goauthentik.io/start?rd=$scheme://$http_host$escaped_request_uri
          nginx.ingress.kubernetes.io/auth-response-headers: Set-Cookie,X-Nightscout-Api-Key
          nginx.ingress.kubernetes.io/auth-snippet: proxy_set_header X-Forwarded-Host $http_host;
          nginx.ingress.kubernetes.io/configuration-snippet: |
            access_by_lua_block {
              local apiKey = ngx.var.authHeader1
              if apiKey ~= nil then
                local args = ngx.req.get_uri_args()
                args.token = apiKey
                ngx.req.set_uri_args(args)
              end
            }
        hosts:
          - host: ${app_url}
            paths:
              - path: /
                service:
                  identifier: nightscout
        tls: &bg-tls
          - secretName: ${certificate_name}
            hosts:
              - ${app_url}
      api:
        enabled: true
        annotations:
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        hosts:
          - host: ${api_url}
            paths:
              - path: /
                service:
                  identifier: nightscout
        tls:
          - secretName: ${certificate_name}
            hosts:
              - ${api_url}
      remove-sw:
        enabled: true
        annotations:
          nginx.ingress.kubernetes.io/configuration-snippet: |
            add_header Content-Type application/javascript;
            return 200 "self.addEventListener('install', event => { event.waitUntil(self.skipWaiting()) })";
        hosts:
          - host: ${app_url}
            paths:
              - path: /sw.js
                pathType: ImplementationSpecific
                service:
                  identifier: nightscout
        tls: *bg-tls
