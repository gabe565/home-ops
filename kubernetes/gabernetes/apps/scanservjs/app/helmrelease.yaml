# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-4.2.0/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: scanservjs
  namespace: scanservjs
spec:
  chart:
    spec:
      chart: app-template
      version: 4.4.0
      reconcileStrategy: ChartVersion
      sourceRef:
        kind: HelmRepository
        namespace: flux-system
        name: bjw-s
  interval: 1h
  driftDetection:
    mode: enabled
  values:
    controllers:
      scanservjs:
        containers:
          app:
            image:
              repository: sbs20/scanservjs
              tag: release-v3.0.4@sha256:e42263444a8dd5d533ead7d9eb2ef5fd9ca7a4a80569a6f9c14b7a3c21b9c7ca
              pullPolicy: IfNotPresent
            command: [node, /usr/lib/scanservjs/server/server.js]
            env:
              TZ: America/Chicago
            probes:
              startup:
                enabled: true
                spec:
                  failureThreshold: 30
                  periodSeconds: 5
              liveness:
                enabled: true
              readiness:
                enabled: true
            securityContext:
              readOnlyRootFilesystem: true
        pod:
          terminationGracePeriodSeconds: 1
          labels:
            policy.gabe565.com/egress-world: "true"
            policy.gabe565.com/ingress-nginx: "true"
          securityContext:
            runAsUser: 1026
            runAsGroup: 100
            fsGroup: 100
            fsGroupChangePolicy: OnRootMismatch

    persistence:
      data:
        storageClass: longhorn-ssd
        accessMode: ReadWriteOnce
        size: 1Gi
        retain: true
        globalMounts:
          - path: /var/lib/scanservjs
      output:
        type: nfs
        server: 192.168.1.240
        path: /volume1/documents/Scans
        globalMounts:
          - path: /var/lib/scanservjs/output
      sane:
        type: configMap
        identifier: sane
        globalMounts:
          - path: /etc/sane.d/pixma.conf
            subPath: pixma.conf
      scan-temp:
        type: emptyDir
        globalMounts:
          - path: /var/lib/scanservjs/temp
      tmp:
        type: emptyDir
        medium: Memory

    service:
      scanservjs:
        controller: scanservjs
        ports:
          http:
            port: 8080

    ingress:
      scanservjs:
        hosts:
          - host: ${app_url}
            paths:
              - path: /
                service:
                  identifier: scanservjs
                  port: http
        tls:
          - secretName: ${certificate_name}
            hosts:
              - ${app_url}
        annotations:
          nginx.ingress.kubernetes.io/auth-url: |-
            http://ak-outpost-gabernetes.authentik.svc.cluster.local:9000/outpost.goauthentik.io/auth/nginx
          nginx.ingress.kubernetes.io/auth-signin: |-
            https://$host/outpost.goauthentik.io/start
          nginx.ingress.kubernetes.io/auth-response-headers: |-
            Set-Cookie,X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid
          nginx.ingress.kubernetes.io/auth-snippet: |
            proxy_set_header X-Forwarded-Host $http_host;
          nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
          nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
          nginx.ingress.kubernetes.io/proxy-read-timeout: "600"

    configMaps:
      config:
        data:
          # language=javascript
          config.local.js: |
            module.exports = {
              afterDevices(devices) {
                devices.forEach(d => {
                  if (d.id.startsWith('pixma:')) {
                    d.features['--resolution'].default = 600;
                    d.features['-x'].limits = [0, 217];
                    d.features['-y'].limits = [0, 298];
                  }
                });
              }
            };
      sane:
        data:
          pixma.conf: |
            bjnp://192.168.2.8

    secrets:
      scantopl:
        stringData:
          PLTOKEN: ${paperless_token}

    networkpolicies:
      scanner:
        controller: scanservjs
        policyTypes: [Egress]
        rules:
          egress:
            - to:
                - ipBlock:
                    cidr: 192.168.2.8/32
