# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-3.7.3/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: your-spotify
  namespace: your-spotify
spec:
  chart:
    spec:
      chart: app-template
      version: 3.7.3
      reconcileStrategy: ChartVersion
      sourceRef:
        kind: HelmRepository
        namespace: flux-system
        name: bjw-s
  interval: 1h
  driftDetection:
    mode: enabled
  values:
    controllers:
      server:
        strategy: RollingUpdate
        containers:
          server:
            image:
              repository: yooooomi/your_spotify_server
              tag: 1.12.0@sha256:081b53a4faf529b7e8ceb0147ba10f4780730b729aebf2edb469a8c30441e99a
              pullPolicy: IfNotPresent
            workingDir: /app/apps/server
            command:
              - sh
              - -c
              - |
                set -eux
                yarn migrate
                exec yarn start
            env:
              TIMEZONE: America/Chicago
              API_ENDPOINT: https://${app_url}/api
              CLIENT_ENDPOINT: https://${app_url}
              SPOTIFY_PUBLIC: ${spotify_public}
              SPOTIFY_SECRET: ${spotify_secret}
              MONGO_NO_ADMIN_RIGHTS: "true"
              DB_PASSWORD:
                secretKeyRef:
                  name: mongodb
                  key: mongodb-passwords
              MONGO_ENDPOINT: mongodb://your-spotify:$(DB_PASSWORD)@mongodb/your-spotify
            probes: &probes
              startup:
                enabled: true
                spec:
                  failureThreshold: 30
                  periodSeconds: 5
              liveness:
                enabled: true
              readiness:
                enabled: true
            securityContext:
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities: {drop: [ALL]}
        pod: &pod
          labels:
            policy.gabe565.com/egress-namespace: "true"
            policy.gabe565.com/egress-world: "true"
            policy.gabe565.com/ingress-ingress: "true"
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000
            fsGroupChangePolicy: OnRootMismatch
            runAsNonRoot: true
            seccompProfile: {type: RuntimeDefault}
      client:
        strategy: RollingUpdate
        initContainers:
          cp-build:
            image: &clientImage
              repository: yooooomi/your_spotify_client
              tag: 1.12.0@sha256:9c20e607b82fc66a0b81a45c04d6ccd8fd056add3a3adacc0bb7a6b99460fdb0
              pullPolicy: IfNotPresent
            command:
              - cp
              - -a
              - apps/client/build/.
              - /build
            securityContext: &securityContext
              allowPrivilegeEscalation: false
              capabilities: {drop: [ALL]}
          template:
            image: *clientImage
            env:
              API_ENDPOINT: https://${app_url}/api
            command:
              - sh
              - -c
              - sh apps/client/scripts/run/variables.sh || true
            securityContext:
              <<: *securityContext
              readOnlyRootFilesystem: true
        containers:
          client:
            image:
              repository: nginxinc/nginx-unprivileged
              tag: stable-alpine
              pullPolicy: IfNotPresent
            probes: *probes
            securityContext: *securityContext
        pod: *pod

    service:
      server:
        controller: server
        ports:
          http:
            port: 8080
      client:
        controller: client
        ports:
          http:
            port: 3000

    persistence:
      tmp:
        enabled: true
        type: emptyDir
      client-build:
        enabled: true
        type: emptyDir
        advancedMounts:
          client:
            cp-build:
              - path: /build
            template:
              - path: /app/apps/client/build
            client:
              - path: /build
      nginx:
        enabled: true
        type: configMap
        name: your-spotify-nginx
        advancedMounts:
          client:
            client:
              - path: /etc/nginx/conf.d/default.conf
                subPath: default.conf

    ingress:
      client:
        enabled: true
        annotations: &annotations
          nginx.ingress.kubernetes.io/auth-url: |-
            http://ak-outpost-gabernetes.authentik.svc.cluster.local:9000/outpost.goauthentik.io/auth/nginx
          nginx.ingress.kubernetes.io/auth-signin: |-
            https://$host/outpost.goauthentik.io/start?rd=$scheme://$http_host$escaped_request_uri
          nginx.ingress.kubernetes.io/auth-response-headers: Set-Cookie
          nginx.ingress.kubernetes.io/auth-snippet: |
            proxy_set_header X-Forwarded-Host $http_host;
          nginx.ingress.kubernetes.io/satisfy: any
          nginx.ingress.kubernetes.io/whitelist-source-range: 192.168.1.0/24
        hosts:
          - host: ${app_url}
            paths:
              - path: /
                service:
                  identifier: client
                  port: http
        tls: &tls
          - secretName: ${certificate_name}
            hosts:
              - ${app_url}
      server:
        enabled: true
        annotations:
          <<: *annotations
          nginx.ingress.kubernetes.io/use-regex: "true"
          nginx.ingress.kubernetes.io/rewrite-target: /$2
        hosts:
          - host: ${app_url}
            paths:
              - path: /api(/|$)(.*)
                pathType: ImplementationSpecific
                service:
                  identifier: server
                  port: http
        tls: *tls

    configMaps:
      nginx:
        enabled: true
        data:
          default.conf: |
            server {
              listen 3000;
              server_name localhost;
              location / {
                root /build;
                try_files $uri /index.html;
              }
            }
